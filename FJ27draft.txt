14/03/2015

Curso Spring senha spring5071 wifi 32249998

Desenvolvimento de uma aplicação que vai ser gravada no banco

Criando a classe produto, no começo usava duas conexões, agora quero usar uma conexão só. A responsabilidae
do produtoDao é só usar a conexão, legal esse pensamento, usar vs. criar, exemplo de desacoplamento da conexão,
passar a conexão pelo construtor é um exemplo de injeção de dependencia. No mercado a injeção de dependencia
é chamada de D.I. , com isso podemos fazer a inversão de controle, com foi feito abaixo, pela injeção
tiramos a criação da conexão do DAO para o TestaProduto.

public class Produto{
	private long id;
	private string nome;
	private double preco;
	private String marca;
	private String descricao;
}

public class ProdutoDao{
	// esse elemento é uma dependencia da classe
	private Connectio conn;
	
	public ProdutoDao(Connection conn){
		//jdbc	
		//this. conn = new ConnectionFactory().getConnection();
		this. conn = conn;
	}

	public long insere(Produto p){
	
	}

	public List<Produto> listar(){
	}
}

public class testaProduto{

	public static void main(){
		// outra versão
		// suponha outra classe ConroladorDeProdutos		
		// injeção de dependencia na mão, veja que vai ficando complexo
		// a injeção de dependencia serve para melhorar toda essa complexidade
		// com injeção de dependencia podemos ir apenas usando as outras 		
		
		//new ProdutoDao(new ControladorDeprodutos (new ConnectionFactory
		//	.getConnection()));
		
		// toda a lógica de criação dos objetos necessários fica dentro do getObject.
		// essas classes que fazem a injeção já foi criada. Por isso usamos o Spring
				
		
		/* sem spring
		ControladorDeProdutos cp = getObject("controlador") // usponha que tem uma classe que te dá um controlador de produtos
 
	

		Connection conn = new ConnectionFactory.getConnection();		

		Produto produto = new Produto();
		
		ProdutoDao produtoDao = new ProdutoDao(conn);
		produtoDao.insere(produto);	
		produtoDao.listar();

		ProdutoAuditDao = new ProdutoAuditDao(conn);
		*/


		//Com Spring
		ApplicationContext context = new ClassPathXmlApplicationContext("classpath:spring.xml");
		// nesse momento ele constroi a conexão também
		ProdutoDao dao = context.getBean(ProdutoDao.class); // pode usar o identificador aqui
		
			
	}
}

jsf indicado para sites com muito formulario, crud etc...

Freemark thales, sitemesh

Usamos o Spring para controlar a injeção de dependencia e a inversão de controle. Para fazermos a injeção
precisamos configurar o spring previamente, usando um xml. Beans são todas as classes que o spring cuida, se você
quer que o spring cuide de uma classe sua ela deve ser um bean. Abaixo a classe ProdutoDao está sendo gerenciada
pelo spring, o spring precisa de saber quem são dependencias do construtor da classe.

Depois configura o pool de conexões, vamos usar um pool de conexões, DBCP da apache pode ser uma opção, veja
que passamos a referencia de um bean para o outro;

spring.xml esse xmls vai no src do projeto

<beans>

	<bean id="ProdutoDao" class="br.munhra.teste.ProdutoDao"> // usar full qualified name 
		<constructor-args id="DBCP">
	</bean>

	<bean id="DBCP" class="org.xxxx.BasicDataSource">
		<property name="username" value="root" />
		<property name="password" value="" />
		<property name="url" value"jdbc:mysql://localhost/FJ27" />
		<property name="driverClass" value="driver"/>
	</bean>

</beans>

Esse é o modulo do spring conhecido com SpringCore, possui inversão de dependencia e injeção. Para autenticação o spring
tem também o Security, (WS)WebServices, ORM(Mapeamento objeto relacional), JMS(mensagens), MAIL, Transaction (muito boa essa parte) e aparte de MVC

Pensando agora na hora em que o carrinho de compras vai ser fechado, roda no tomcat e no jetty que são mais leves, spring boot é do
spring 4 foi lançado no meio de 2014

- Autenticar
- Chamda a um serviço WEB
- Baixar o Estoque
- Notificar CD
- Disparar email
- Controlar a transação

Fazer uma aplicação web usando o spring usamos o spring MVC, quando usamos servlets a parte ruim misturar codigo java com html
evitar de ficar usando request.getParameter(), para evitar misturar codigo java com html

Sai do browser, vai para o servidor e encontra um servlet e depois faz uma chamada para o Dao depois para uma pagina JSP. Esse
fluxo já é um MVC. Modelo é o produto, Controller é o servlet e a view é o JSP.

Acessar a aplicação em http://localhost:8080/estoque/oi em spring, vamos fazer o spring chamar a classe OiController teria que escrever
no xml, mas vamos usar uma anotação chamada @Controller

Spring é um actionbased framework

Bug F5

metodos do form são get and post o post esconde os parametros

Formato de url unfriendly
produto/detalhe?id=1
Format friendly
produto/1

@Controller
public class OiController(){

	@RequestMapping("oi")// coloca a url que vai mapear	
	public String void oi(){
		//return "/WEB-INF/jsps/oi.jsp";
		return "oi.jsp" // feito a configuração o prefixo já esta definido podemos mecher na extenção	
	}
}

//view
//para o jsp não ficar visivel  para o usuario guarda na pasta web-inf, e o usuario vai ter que acessar pelo controller
oi.jsp
<h1>Ola Spring<h1>

spring.xml // para ser anotation

<beans>
	<mvc:annotation-based /> // muda o spring para pegar as anotações
	<context:component-scan base-package="br.com.caelum.estoque"/>
	
	<bean class="org.spring.framework.InternalResourceViewResolver">
		<propertyName="prefix" value="/WEB-INF/JSPS/">	
		<propertyName="sufix"  value=".jsp">
	</bean>
	
</beans>


Vamos agora exibir a lista de produto no jsp

@Component // aqui o spring vai gerenciar o objeto, como se tivesse marcado no xml
public class ProdutoDao{

}

@Controller
@RequestMapping("/produto")
public class ProdutoController{

	private ProdutoDao produtoDao;
		   // pode anotar tanto o atributo quanto o construtor, foi preferido colocar no construtor
		   // para mostrar a dependencia clara, o autowired diz ao spring que ele deve injetar uma instancia
		   // do objeto ProdutoDao
	@Autowired	
	public ProdutoController(ProdutoDao produtoDao){
		this.produtoDao = produtoDao; 
	}

	@RequestMapping("/listar")	
	public ModelAndView lista(){
		
		List<Produto> lista = produtoDao.listar();	
		// agora precisa passar a lista para a view
		ModelAndView mv = new ModelAndView("Lista-Produtos"); // ModelAndView faz a ponte entre o modelo e a view
		mv.addAttribute("produtos",lista);
		// o literal produtos do parametro acima vai ser usado na view para pegar a lista
			
		return mv;		
	}
	//@RequestMapping("/detalhe/{id}") // agora aceita o friendly
	@RequestMapping("/detalhe") //parametro id com o mesmo nome faz o binding da url
	//public ModelAndView detalhes(@PathVariable Long id){ //agora muda para fazer o binding da notação friendly	
	public ModelAndView detalhes(Long id){
		Produto produto = dao.buscaPorId(id);
		ModelAndView mv = new ModelAndView("/detalhes");
		mv.addAttribute(produto)
		return mv
	}

	@RequestMapping(value="/salvar",method=Reques..Post) // vai salvar usando uma convenção de nomes só quando for post	
	public void string salvar(Produto produto){
		dao.salvar(produto);
		//return "/lista"; // tem que fazer o spring redirencionar para carregar a lista
		return "redirect:/produto/lista" 	
	}
}

detalhes.jsp
<html>
	Nome: ${produto.nome} <br/>
	Descricao: ${produto.descricao} <br/>
	Quantidade: ${produto.quantidade} <br/>
</html>

lista-produtos.jsp (usa expression language para pegar os dados)

<table>
	
	<c:forEach items="produtos" var="produto"> // produtos vem lá do ModelAndView
	<tr>
		<td>
			<a href="produto/detalhe?id=${produto.id}>
				Detalhes
			</a>
		</td>
	</tr>

</table>


cadastro.jsp

<form action="produto/salvar" method="POST"> // caminho do submit
	Nome <input type="text" name="nome"/>
	Descrição <input type="text" name="descricao"/>
	Quantidade <input type="text" name="quantidade"/>
	<input type="submit" value="Cadastrar"/>
</form>


21/03/2015
Hibernate e técnologias de persistencia

class Produto{

	String nome;
	String descricao;
	Integer quantidade;
}

List<Produto> listaProdutos(){

	conn = ....
	sql = "Select * from produtos";
	PreparedStmt = conn.prepareStatement(sql);
	Produtos produtos...
	while(rs.next()){
		Produto produto = new Produto();	
		String nome = rs.getString("nome");
		produto.setNome(nome);
		

		produtos.addObject(produto)
	}

	return produtos;
}

JDBC foi feito para conversar com banco de dados, o código acima foi feito para mapear o banco
relacional para um objeto (ORM).

Usando o ORM

pode user @Table, mas só se o nome da tabela for diferente do nome da classe
@Entity
class produto{
	
	@Id @GeneratedValue(strategy=identity)
	Long id;
	 
	String nome;
	String descricao;
	Integer quantidade;

...

}
// usando hibernate
// com spring
//@Component
@Primary // essa anotação mostra qual é o Primario e a injeção consegue saber que é essa implementação que deve ser usada.
@Repository // ligado com banco de dados
@Transactional // marca todos os métodos
class ProdutoDBDAO implements ProdutoDAO{

	@Autowired	
	Session session // esse é do hibernate	

	public List<Produto> listaProdutos(){

		//Hql, hibernatne query language, JPQL, jpa query lanaguage
		Query query = session.createQuery("Select p from Produto p"); 
		return query.list();

			
	}
	@Transactional // abre a transação e faz o commit no final
	public void adiciona(Produto produto){
		session.save(produto);
	}	

	//session.save
	//session.update
	//session.delete

//Precisa configurar o banco
spring.xml

<beans>
	// vai criar a conexão e quando terminar ele mata
	<bean class="AnnotationSessionFactoryBean" id="sessionFactory" destroy-method="Destroy">
		// configurações do hibernate		
		<property name="hibernateProperties">
			<props>
				<prop key="url">JDBC:MYSQL://localhost/FJ27</prop>
				<prop key="username">root</prop>
				<prop key="password"></prop>
				<prop key="driver_class>com.jdbc.mysql.Driver</prop>
				<prop key="autocommit">true</prop>
				<prop key="hibernate.hbm2ddl.auto></prop> // "Database Data language" 
				<prop key="dialect">MySQL5InnoDBDialect</prop>
				<prop key="showsql">true</prop>
				<prop key="formatsql">true</prop>
			</props>
		</property>

		<property="AnnotedClasses>
			<list>
				<value> br.com.*.produto</value>			
			</list>
		</property>

	</bean>
	<bean class="org.*.HibernateTransactionManager" id="TxManager">
		<property name="sessionFactory" ref="sessionFactory">
	</bean>
	<MVC:annotation_driven />
	<tx:annotation_driven />
			
				 
</beans>


produtoController{
	// nome da classe no qualificador
	@AutoWired @Qualifier("produtoDBDao") // problema com a duplicidade das implementações usa um qualificador para isso
	Produto dao;

}

@Qualifier, distingue dois tipos de implementação para uma interface

Opções do hbm2ddl
CREATE-DROP -> cria tudo e apaga tudo[ não usar em produção]
UPDATE -> atualiza a mudança dos objetos para o banco um atributo novo cria uma coluna [não usar em produção]
NONE -> Primary

JAVA tem migration estilo ruby
liquidbase [multibanco] esse é bom para produção


Se não colocar nada o hibernate cria uma tabela para controlar os id's quando só coloca o @Id, 
o hibernate também segue o conceito de convenção sobre configuração. No caso do atributo se a coluna
tiver o mesmo nome do atributo ele mapeia direto. Alguns exemplos são Hibernate, Eclipse Link, IBatis
e todos seguem a JPA. Escopo padrão do spring é singleton o destroy só cai quando acabar a session

Dá para não usar o qualifier informando a classe padrão que será usada pela implementação.

Transações com Spring - Spring Transaction

No exemplo anterior usamos a chave com autocommit, mas se tiver que ir fazendo várias transações e se
der pau no meio de uma delas, o interessante é ter um rollback. Com o autocommit perdemos o controle
das transações, no DAO ia ser legal podermos abrir e fechar a transação, se não cuidar bem das transações
podemos ter problemas de consistencia etc.. O spring controla as transações pelo SpringTx, esse
modulo é um dos mais usados no spring. A transação tem que estar ligada com a sessão.


Vamos agora colocar a movimentação do produto, para fazer a anotação de associação faz sempre a referencia da classe
para a dependencia

@Entity
public class Movimentacao{
	
	@Id @GeneratedValue
	Long id
	@Enumerated(String) //pega a string do enum ordinal pega o ordinal do enum	
	TipoMovimentacao tipo
	@Temporal(TimeStamp)	
	Calendar data
	@ManyToOne        //Produto_Id	
	Produto produto;
	Integer quantidade;

}

public Enum TipoMovimentacao{
	
	ENTRADA,SAIDA;

}

@Controller
public class ProdutoController{

	public String alterar(Produto p){

		@Autowire
		MovimentacaoService movService;
		movService.gerar(p);		
		produtoDAO.alterar(p);
		
	}

}
// essa classe service faz a lógica de negocio por isso tem o final Service
// por isso usa o @Service
//@Component
@Service
public class MovimentacaoService{

	@Autowired
	ProdutoDao pDao;
	@Autowired
	Movimentacao movDao;

	public void gerar(Produto p){  // Regra de negocio
		
		Produto outro = produtoDAO.buscaPorId(p.getId());
		
		int movQTd = p.getQtd() - outro.getQtd();

		Movimentacao movimentacao = new Movimentacao();
		movimentacao.setQtd(movQtd);
		movimentacao.setProduto(p);
		movimentacao.setData(Calendar.getInstance());
		
		if (outro.getQuantidade() > p.getQuantidade()){
			movimentacao.setTipo(TipoMovimentacao.ENTRADA);
		}else if (){
			movimentacao.setTipo(TipoMovimentacao.SAIDA);
		}	
		
		
		movimentacao.setQuantidade(p.getQuantidade());


		movDao.adiciona(movimentacao);	
	}

}

@Entity
class Produto{
	
	:
	:
	@OneToMany(mappedBy="Produto")// nome do atributo na movimentacao
	List<Movimentacao> movimentacoes;

}


Mostra.JSP

	<H2> Produto </H2>
		 Nome:${produto.nome}

	<ul>
		<c:forEach items="${produto.movimentacoes}"


.. continua no exericio 5.20

Pensamento interessante o DAO não ter lógica de negócio e a lógica de negócio ficar na SERVICE,
cuidado com o EAGER pode detonar a memória, tem quer usar um filter para manter a session, pela documentacao
do hibernate dá para usar uma open session in view. Esse é um filter do spring


web.xml

<filter>
	<filter-class>org.*.OpenSessionInViewFilter/>
</filter>
<filter-mapping>
	<filter-name>opensession</filter-name>	
	<servlet-name>SpringServlet</servlet-name>
</filter-mapping>
<listener>
	ContextLoaderListener
</listener>
<context-param>
	<param-name>contextconfiglocation</param-name>
	<param-value>/WEB-INF/app-config.xml</param-value>
</context-param>



Mostrar as movimentacoes na tela, vai trazer a lista de movimentações

