14/03/2015

Curso Spring

Desenvolvimento de uma aplicação que vai ser gravada no banco

Criando a classe produto, no começo usava duas conexões, agora quero usar uma conexão só. A responsabilidae
do produtoDao é só usar a conexão, legal esse pensamento, usar vs. criar, exemplo de desacoplamento da conexão,
passar a conexão pelo construtor é um exemplo de injeção de dependencia. No mercado a injeção de dependencia
é chamada de D.I. , com isso podemos fazer a inversão de controle, com foi feito abaixo, pela injeção
tiramos a criação da conexão do DAO para o TestaProduto.

public class Produto{
	private long id;
	private string nome;
	private double preco;
	private String marca;
	private String descricao;
}

public class ProdutoDao{
	// esse elemento é uma dependencia da classe
	private Connectio conn;
	
	public ProdutoDao(Connection conn){
		//jdbc	
		//this. conn = new ConnectionFactory().getConnection();
		this. conn = conn;
	}

	public long insere(Produto p){
	
	}

	public List<Produto> listar(){
	}
}

public class testaProduto{

	public static void main(){
		// outra versão
		// suponha outra classe ConroladorDeProdutos		
		// injeção de dependencia na mão, veja que vai ficando complexo
		// a injeção de dependencia serve para melhorar toda essa complexidade
		// com injeção de dependencia podemos ir apenas usando as outras 		
		
		//new ProdutoDao(new ControladorDeprodutos (new ConnectionFactory
		//	.getConnection()));
		
		// toda a lógica de criação dos objetos necessários fica dentro do getObject.
		// essas classes que fazem a injeção já foi criada. Por isso usamos o Spring
				
		
		/* sem spring
		ControladorDeProdutos cp = getObject("controlador") // usponha que tem uma classe que te dá um controlador de produtos
 
	

		Connection conn = new ConnectionFactory.getConnection();		

		Produto produto = new Produto();
		
		ProdutoDao produtoDao = new ProdutoDao(conn);
		produtoDao.insere(produto);	
		produtoDao.listar();

		ProdutoAuditDao = new ProdutoAuditDao(conn);
		*/


		//Com Spring
		ApplicationContext context = new ClassPathXmlApplicationContext("classpath:spring.xml");
		// nesse momento ele constroi a conexão também
		ProdutoDao dao = context.getBean(ProdutoDao.class); // pode usar o identificador aqui
		
			
	}
}

Usamos o Spring para controlar a injeção de dependencia e a inversão de controle. Para fazermos a injeção
precisamos configurar o spring previamente, usando um xml. Beans são todas as classes que o spring cuida, se você
quer que o spring cuide de uma classe sua ela deve ser um bean. Abaixo a classe ProdutoDao está sendo gerenciada
pelo spring, o spring precisa de saber quem são dependencias do construtor da classe.

Depois configura o pool de conexões, vamos usar um pool de conexões, DBCP da apache pode ser uma opção, veja
que passamos a referencia de um bean para o outro;

spring.xml esse xmls vai no src do projeto

<beans>

	<bean id="ProdutoDao" class="br.munhra.teste.ProdutoDao"> // usar full qualified name 
		<constructor-args id="DBCP">
	</bean>

	<bean id="DBCP" class="org.xxxx.BasicDataSource">
		<property name="username" value="root" />
		<property name="password" value="" />
		<property name="url" value"jdbc:mysql://localhost/FJ27" />
		<property name="driverClass" value="driver"/>
	</bean>

</beans>

Esse é o modulo do spring conhecido com SpringCore, possui inversão de dependencia e injeção. Para autenticação o spring
tem também o Security, (WS)WebServices, ORM(Mapeamento objeto relacional), JMS(mensagens), MAIL, Transaction (muito boa essa parte) e aparte de MVC

Pensando agora na hora em que o carrinho de compras vai ser fechado, roda no tomcat e no jetty que são mais leves, spring boot é do
spring 4 foi lançado no meio de 2014

- Autenticar
- Chamda a um serviço WEB
- Baixar o Estoque
- Notificar CD
- Disparar email
- Controlar a transação



